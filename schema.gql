# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthSignInResponse {
  sessionToken: String!
  refreshToken: String!
}

type BadgeModel {
  id: String!
  name: String!
  picture: String!
}

type ProgressOfRouteModel {
  routeId: String!
  currentPointIdx: Float!
  status: RouteStatus!
  route: RoutesModel!
  currentPoint: PointModel!
}

enum RouteStatus {
  InProgress
  Completed
}

type CompletedRouteModel {
  routeId: String!
  completedAt: String!
  route: RoutesModel!
}

type UserModel {
  id: String!
  username: String!
  email: String!
  picture: String
  type: UserType!
  authType: [UserAuthType!]!
  badges: [BadgeModel!]!
  friends: [UserModel!]!
  distance: Float!
  time: String!
  completedRoutes: [CompletedRouteModel!]!
  progressOfRoutes: [ProgressOfRouteModel!]!
  progressOfRoute(input: ProgresOfRouteInput!): ProgressOfRouteModel
}

enum UserType {
  User
  Admin
}

enum UserAuthType {
  Google
  Local
}

input ProgresOfRouteInput {
  routeId: String!
}

type PointModel {
  title: String!
  description: String!
  lat: Float!
  lng: Float!
  question: String
  answers: [String!]
}

type RoutesModel {
  id: String!
  heroId: String!
  badgeId: String!
  title: String!
  description: String!
  icon: String!

  """Distance in kilometers"""
  distance: Float!
  difficulty: Int!
  lat: Float!
  lng: Float!
  facilities: [String!]!
  points: [PointModel!]!
  badge: BadgeModel!
  hero: HeroModel!
}

type HeroModel {
  id: String!
  name: String!
  description: String!
  picture: String!
  excerpt: String!
}

type FriendRequestModel {
  id: String!
  status: FriendRequestStatus!
  from: UserModel!
  to: UserModel!
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Query {
  hello: String!
  userMe: UserModel!
  badges(input: BadgeInput!): BadgeModel!
  routes: [RoutesModel!]!
  route(input: RoutesInput!): RoutesModel!
  heros: [HeroModel!]!
  friendsRequests: [FriendRequestModel!]!
}

input BadgeInput {
  id: String
}

input RoutesInput {
  id: String
}

type Mutation {
  authGoogleLogin(input: GoogleAuthInput!): AuthSignInResponse!
  authRegister(input: AuthRegisterInput!): UserModel!
  authLogin(input: AuthLoginInput!): AuthSignInResponse!
  answer(input: AnswerInput!): UserModel!
  badge(input: BadgeInput!): BadgeModel!
  friendRequestSend(input: FriendRequestInput!): FriendRequestModel!
  friendRequestDecision(input: FriendRequestDecisionInput!): FriendRequestModel!
}

input GoogleAuthInput {
  code: String
  accessToken: String
  username: String
}

input AuthRegisterInput {
  email: String!
  username: String!
  password: String!
}

input AuthLoginInput {
  email: String!
  password: String!
}

input AnswerInput {
  routeId: String!
  pointIdx: Float!
  answerIdx: Float!
}

input FriendRequestInput {
  username: String!
}

input FriendRequestDecisionInput {
  id: String!
  decision: Boolean!
}